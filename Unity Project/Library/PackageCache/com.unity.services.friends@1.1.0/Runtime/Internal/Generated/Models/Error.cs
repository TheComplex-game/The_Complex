//-----------------------------------------------------------------------------
// <auto-generated>
//     This file was generated by the C# SDK Code Generator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------


using System;
using System.Collections.Generic;
using System.Linq;
using UnityEngine.Scripting;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Unity.Services.Friends.Internal.Generated.Http;



namespace Unity.Services.Friends.Internal.Generated.Models
{
    /// <summary>
    /// Schema to an API call when returning a status, title, and details about an error.
    /// </summary>
    [Preserve]
    [DataContract(Name = "Error")]
    internal class Error
    {
        /// <summary>
        /// Schema to an API call when returning a status, title, and details about an error.
        /// </summary>
        /// <param name="status">Indicates the HTTP status code of the response.</param>
        /// <param name="title">Title of the response.</param>
        /// <param name="detail">Details about the response.</param>
        /// <param name="code">An integer in the range of 24000-24999</param>
        /// <param name="type">The type of error</param>
        /// <param name="requestID">A unique ID for this request</param>
        /// <param name="details">Array with details about all the internal validation errors with information including unique validation error code number and validation error message.</param>
        [Preserve]
        public Error(int status, string title, string detail, int code, string type, string requestID, List<Detail> details = default)
        {
            Status = status;
            Title = title;
            Detail = detail;
            Details = details;
            Code = code;
            Type = type;
            RequestID = requestID;
        }

        /// <summary>
        /// Indicates the HTTP status code of the response.
        /// </summary>
        [Preserve]
        [DataMember(Name = "status", IsRequired = true, EmitDefaultValue = true)]
        public int Status{ get; }
        
        /// <summary>
        /// Title of the response.
        /// </summary>
        [Preserve]
        [DataMember(Name = "title", IsRequired = true, EmitDefaultValue = true)]
        public string Title{ get; }
        
        /// <summary>
        /// Details about the response.
        /// </summary>
        [Preserve]
        [DataMember(Name = "detail", IsRequired = true, EmitDefaultValue = true)]
        public string Detail{ get; }
        
        /// <summary>
        /// Array with details about all the internal validation errors with information including unique validation error code number and validation error message.
        /// </summary>
        [Preserve]
        [DataMember(Name = "details", EmitDefaultValue = false)]
        public List<Detail> Details{ get; }
        
        /// <summary>
        /// An integer in the range of 24000-24999
        /// </summary>
        [Preserve]
        [DataMember(Name = "code", IsRequired = true, EmitDefaultValue = true)]
        public int Code{ get; }
        
        /// <summary>
        /// The type of error
        /// </summary>
        [Preserve]
        [DataMember(Name = "type", IsRequired = true, EmitDefaultValue = true)]
        public string Type{ get; }
        
        /// <summary>
        /// A unique ID for this request
        /// </summary>
        [Preserve]
        [DataMember(Name = "requestID", IsRequired = true, EmitDefaultValue = true)]
        public string RequestID{ get; }
    
        /// <summary>
        /// Formats a Error into a string of key-value pairs for use as a path parameter.
        /// </summary>
        /// <returns>Returns a string representation of the key-value pairs.</returns>
        internal string SerializeAsPathParam()
        {
            var serializedModel = "";

            serializedModel += "status," + Status.ToString() + ",";
            if (Title != null)
            {
                serializedModel += "title," + Title + ",";
            }
            if (Detail != null)
            {
                serializedModel += "detail," + Detail + ",";
            }
            if (Details != null)
            {
                serializedModel += "details," + Details.ToString() + ",";
            }
            serializedModel += "code," + Code.ToString() + ",";
            if (Type != null)
            {
                serializedModel += "type," + Type + ",";
            }
            if (RequestID != null)
            {
                serializedModel += "requestID," + RequestID;
            }
            return serializedModel;
        }

        /// <summary>
        /// Returns a Error as a dictionary of key-value pairs for use as a query parameter.
        /// </summary>
        /// <returns>Returns a dictionary of string key-value pairs.</returns>
        internal Dictionary<string, string> GetAsQueryParam()
        {
            var dictionary = new Dictionary<string, string>();

            var statusStringValue = Status.ToString();
            dictionary.Add("status", statusStringValue);
            
            if (Title != null)
            {
                var titleStringValue = Title.ToString();
                dictionary.Add("title", titleStringValue);
            }
            
            if (Detail != null)
            {
                var detailStringValue = Detail.ToString();
                dictionary.Add("detail", detailStringValue);
            }
            
            var codeStringValue = Code.ToString();
            dictionary.Add("code", codeStringValue);
            
            if (Type != null)
            {
                var typeStringValue = Type.ToString();
                dictionary.Add("type", typeStringValue);
            }
            
            if (RequestID != null)
            {
                var requestIDStringValue = RequestID.ToString();
                dictionary.Add("requestID", requestIDStringValue);
            }
            
            return dictionary;
        }
    }
}
